{
    "root": {
        "data": {
            "id": "cecu31wfsbc0",
            "created": 1631950256276,
            "text": "JS数据类型"
        },
        "children": [
            {
                "data": {
                    "id": "cecud01s0rs0",
                    "created": 1631951035886,
                    "text": "原始类型",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cecudaf45ig0",
                            "created": 1631951058461,
                            "text": "number",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cecudd2zyuw0",
                            "created": 1631951064258,
                            "text": "string",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cecudf4gu080",
                            "created": 1631951068701,
                            "text": "boolean",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cecudjrqnxk0",
                            "created": 1631951078815,
                            "text": "undefined",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cecudmw47gw0",
                            "created": 1631951085610,
                            "text": "symbol (es2015)",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cecudppw4c00",
                            "created": 1631951091764,
                            "text": "bigint （es2020)",
                            "layout": null
                        },
                        "children": []
                    },
                    {
                        "data": {
                            "id": "cecudt6k0ww0",
                            "created": 1631951099302,
                            "text": "null (特殊的原始类型）",
                            "layout": null,
                            "note": "typeof 666 === 'number' // true\ntypeof 'str' === 'string' // true\ntypeof false === 'boolean' // true\ntypeof undefined === 'undefined' // true\ntypeof Symbol('sym') === 'symbol' // true\ntypeof 666n === 'bigint' // true\ntypeof null === 'object' // true\n\n// 原理是这样的，不同的对象在底层都表示为二进制，\n// 在 JavaScript 中二进制前三位都为 0 的话会被判断为 object 类型，\n// null 的二进制表示是全 0，自然前三位也是 0，所以执行 typeof 时会返回“object”\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cecuh75ahfs0",
                                    "created": 1631951364793,
                                    "text": "typeof null === 'object' // true",
                                    "layout": null
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            },
            {
                "data": {
                    "id": "cecud4ve1ns0",
                    "created": 1631951046384,
                    "text": "引用类型",
                    "layout": null
                },
                "children": [
                    {
                        "data": {
                            "id": "cecuijvf4600",
                            "created": 1631951470858,
                            "text": "Object"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cecuir98tj40",
                                    "created": 1631951486932,
                                    "text": "Function"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecuiyfq8fs0",
                                    "created": 1631951502561,
                                    "text": "Array"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecuj1de80w0",
                                    "created": 1631951508951,
                                    "text": "RegExp"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecuj4nemu80",
                                    "created": 1631951516086,
                                    "text": "Math"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecukhfr4140",
                                    "created": 1631951622286,
                                    "text": "Map"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecukj5iywg0",
                                    "created": 1631951626021,
                                    "text": "Set"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecukku697k0",
                                    "created": 1631951629688,
                                    "text": "WeakMap"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecukreg4600",
                                    "created": 1631951643975,
                                    "text": "WeakSet"
                                },
                                "children": []
                            }
                        ]
                    },
                    {
                        "data": {
                            "id": "cecup5tdxps0",
                            "created": 1631951988810,
                            "text": "特殊引用类型",
                            "note": "let s1 = 'some text'\nlet s2 = s1.substring(2)\n\n// 上面等同于下面的操作\nlet s1 = new String('some text')\nlet s2 = s1.substring(2)\ns1 = null\n\n// 举例1\nlet s1 = 'some text'\ns1.color = 'red'\nconsole.log(s1.color) // undefined\n// 原因就是第二行代码运行时会临时创建一个String对象，而当第三行代码执行时，这个对象已经被销毁了\n// 实际上，第三行代码在这里创建了自己的String 对象，但这个对象没有color 属性。\n\n// 举例2\nlet obj = new Object('some text')\nconsole.log(obj instanceof String) // true\n// 如果传给 Object 的是字符串，则会创建一个 String 的实例。\n\n// 举例3\nlet value = '25'\nlet number = Number(value) // 转型函数\nconsole.log(typeof number) // \"number\"\nlet obj = new Number(value) // 构造函数\nconsole.log(typeof obj) // \"object\"\n// 如果是数值，则会创建 Number 的实例。布尔值则会得到 Boolean 的实例。\n\n// 举例4\nlet falseObject = new Boolean(false)\nlet result = falseObject && true\nconsole.log(result) // true\n\nlet falseValue = false\nresult = falseValue && true\nconsole.log(result) // false\n\nconsole.log(typeof falseObject) // object\nconsole.log(typeof falseValue) // boolean\nconsole.log(falseObject instanceof Boolean) // true\nconsole.log(falseValue instanceof Boolean) // false\n"
                        },
                        "children": [
                            {
                                "data": {
                                    "id": "cecup9uq0m80",
                                    "created": 1631951997598,
                                    "text": "Number"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecupduwob40",
                                    "created": 1631952006316,
                                    "text": "String"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecupg9rhx40",
                                    "created": 1631952011568,
                                    "text": "Boolean"
                                },
                                "children": []
                            },
                            {
                                "data": {
                                    "id": "cecuqq212ow0",
                                    "created": 1631952111232,
                                    "text": "特殊提示：",
                                    "note": "为了方便操作原始类型，ECMAScript 提供了 3 种特殊的引用类型：Number、String 和Boolean。\n这些类型具有上面介绍的其他引用类型一样的特点，但也具有与各自原始类型对应的特殊行为。每当用到某个原始类型的方法或属性时，\n后台都会创建一个相应原始包装类型的对象，从而暴露出操作原始类型的各种方法。"
                                },
                                "children": []
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "template": "right",
    "theme": "snow",
    "version": "1.4.43"
}